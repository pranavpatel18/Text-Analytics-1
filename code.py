# -*- coding: utf-8 -*-
"""text_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z9Dy4sYohGSfUFtcEXryqnKsv5eyFeT-
"""

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/content/train.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import matplotlib.pyplot as plt
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

from wordcloud import WordCloud

from sklearn.naive_bayes import MultinomialNB

from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.preprocessing import LabelEncoder

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import roc_auc_score

# %matplotlib inline
# %config IPCompleter.greedy=True

text = pd.read_csv('/content/train.csv')

display(text.head())

display(text.describe())

print(text.info())

print(text['label'].value_counts())
print()

print(text['label'].value_counts(normalize=True))

sns.countplot(x ='label', data = text)
plt.title("Count of the Labels")
plt.show()

lab_enc = LabelEncoder()
text['label_enc'] = lab_enc.fit_transform(text['label'])
display(text.head())
print(text.dtypes)

text['tweet_count'] = text['tweet'].str.split().str.len()
print(text.groupby('label')['tweet_count'].mean())
sns.distplot(text[text['label']=='NOT']['tweet_count'], label='NOT')
sns.distplot(text[text['label']=='OFF']['tweet_count'], label='OFF'),
plt.legend()
plt.show()

NOT = text[text['label']=='NOT']['tweet'].str.cat(sep=', ')
OFF = text[text['label']=='OFF']['tweet'].str.cat(sep=', ')
word_cloud = WordCloud(width = 450, height = 450, min_font_size = 11, background_color ='black')
word_cloud_NOT = word_cloud.generate(NOT)
plt.figure(figsize = (4, 4), facecolor = None) 
plt.imshow(word_cloud_NOT) 
plt.axis("off") 
plt.title("Common words in Non-offensive tweets")
plt.tight_layout(pad = 0) 
plt.show() 
word_cloud_OFF = word_cloud.generate(OFF)
plt.figure(figsize = (4, 4), facecolor = None) 
plt.imshow(word_cloud_OFF) 
plt.axis("off")
plt.title("Common words in Offensive tweets")
plt.tight_layout(pad = 0) 
plt.show()

data_test = pd.read_csv('/content/test.csv')

lab_enc = LabelEncoder()
data_test['label_enc'] = lab_enc.fit_transform(data_test['label'])
display(data_test.head())
print(data_test.dtypes)

x_train = text['tweet']
y_train = text['label_enc']
x_test = data_test['tweet']
y_test = data_test['label_enc']

vector = TfidfVectorizer(strip_accents='ascii')
x_train = vector.fit_transform(x_train)
x_test = vector.transform(x_test)

"""NAIVE BAYES MODEL (100% train data)"""

bayes_naive = MultinomialNB()
bayes_naive.fit(x_train, y_train)
print("Accuracy:",bayes_naive.score(x_test, y_test))

y_prediction = bayes_naive.predict(x_test)
cm_0 = confusion_matrix(y_test, y_prediction)
print("Confusion Matrix:\n")
print(cm_0)
report_class = classification_report(y_test, y_prediction)
print("\n\nClassification Report:\n")
print(report_class)
score_auc = roc_auc_score(y_test, y_prediction)
print("\nROC AUC Score is:",score_auc)

u_prediction_probability = bayes_naive.predict(x_test)

false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, u_prediction_probability)

plt.plot(false_positive_rate, true_positive_rate)
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.show()

from google.colab import drive
drive.mount('/content/drive')

"""NAIVE BAYES MODEL (75% train data)"""

X = text['tweet']
Y = text['label_enc']

X_train_75, X_test, Y_train_75, Y_test = train_test_split(X, Y, test_size=0.25, random_state=34, stratify=Y)

train_25 = text.sample(frac = 0.25)

train_25.to_csv("/content/drive/My Drive/CE807/Assignment2/1234567/train_25.csv")

vector_75 = TfidfVectorizer(strip_accents='ascii')
X_train_75 = vector_75.fit_transform(X_train_75)
X_test = vector_75.transform(X_test)

nb_75 = MultinomialNB()
nb_75.fit(X_train_75, Y_train_75)
print("Accuracy:",nb_75.score(X_test, Y_test))

"""NAIVE BAYES MODEL (50% train data)"""

X_train_50, X_test, Y_train_50, Y_test = train_test_split(X, Y, test_size=0.50, random_state=34, stratify=Y)

vector_50 = TfidfVectorizer(strip_accents='ascii')
X_train_50 = vector_50.fit_transform(X_train_50)
X_test = vector_50.transform(X_test)

nb_50 = MultinomialNB()
nb_50.fit(X_train_50, Y_train_50)
print("Accuracy:",nb_50.score(X_test, Y_test))

"""NAIVE BAYES MODEL (25% train data)"""

X_train_25, X_test, Y_train_25, Y_test = train_test_split(X, Y, test_size=0.75, random_state=34, stratify=Y)

vector_25 = TfidfVectorizer(strip_accents='ascii')
X_train_25 = vector_25.fit_transform(X_train_25)
X_test = vector_25.transform(X_test)

nb_25 = MultinomialNB()
nb_25.fit(X_train_25, Y_train_25)
print("Accuracy:",nb_25.score(X_test, Y_test))

"""LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression
LR_model_tweet = LogisticRegression()

LR_model_tweet.fit(x_train,y_train)

LR_tweet_prediction = LR_model_tweet.predict(x_test)
accuracy_score(y_test,LR_tweet_prediction)

cm_LR = confusion_matrix(y_test,LR_tweet_prediction)
print(cm_LR)
cr_LR = classification_report(y_test,LR_tweet_prediction)
print(cr_LR)

u_prediction__LR = LR_model_tweet.predict(x_test)

false_positive_rate_LR, true_positive_rate_LR, thresholds_LR = roc_curve(y_test, u_prediction__LR)

plt.plot(false_positive_rate_LR, true_positive_rate_LR)
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate for LR')
plt.ylabel('True Positive Rate for LR')
plt.title('ROC Curve regarding LR')
plt.show()

